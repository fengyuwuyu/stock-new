<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bdtd.card.data.stock.dao.StockMainMapper">
	<resultMap id="BaseResultMap" type="com.bdtd.card.data.stock.model.StockMain">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="symbol" property="symbol" jdbcType="VARCHAR" />
		<result column="day" property="day" jdbcType="DATE" />
		<result column="open" property="open" jdbcType="REAL" />
		<result column="close" property="close" jdbcType="REAL" />
		<result column="max" property="max" jdbcType="REAL" />
		<result column="min" property="min" jdbcType="REAL" />
		<result column="volume" property="volume" jdbcType="BIGINT" />
		<result column="increase" property="increase" jdbcType="REAL" />
	</resultMap>

	<resultMap type="com.bdtd.card.data.stock.model.StockMainAnalyse" id="StockMainAnalyse">
		<result column="symbol" property="symbol" />
		<collection property="dayIncreases" ofType="com.bdtd.card.data.stock.model.DayIncrease"
			javaType="java.util.List">
			<result column="day" property="day" />
			<result column="increase" property="increase" />
			<result column="open" property="open" />
			<result column="close" property="close" />
			<result column="max" property="max" />
			<result column="min" property="min" />
			<result column="volume" property="volume" />
		</collection>
	</resultMap>

	<sql id="Base_Column_List">
		id, symbol, day, open, close, max, min, volume, increase
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select 'true' as QUERYID,
		<include refid="Base_Column_List" />
		from stock_main
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from stock_main
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.bdtd.card.data.stock.model.StockMain">
		insert into stock_main ( symbol, day,
		open, close, max, min,
		volume, increase)
		values
		<foreach collection="list" item="item" separator=",">
			<foreach collection="item" open="(" close=")" separator=","
				item="it" index="index">
				<if test="index==0">
					#{symbol},#{it}
				</if>
				<if test="index!=0">
					#{it}
				</if>
			</foreach>
		</foreach>
	</insert>
	<insert id="insertSelective" parameterType="com.bdtd.card.data.stock.model.StockMain">
		insert into stock_main
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="symbol != null">
				symbol,
			</if>
			<if test="day != null">
				day,
			</if>
			<if test="open != null">
				open,
			</if>
			<if test="close != null">
				close,
			</if>
			<if test="max != null">
				max,
			</if>
			<if test="min != null">
				min,
			</if>
			<if test="volume != null">
				volume,
			</if>
			<if test="increase != null">
				increase,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="symbol != null">
				#{symbol,jdbcType=VARCHAR},
			</if>
			<if test="day != null">
				#{day,jdbcType=DATE},
			</if>
			<if test="open != null">
				#{open,jdbcType=REAL},
			</if>
			<if test="close != null">
				#{close,jdbcType=REAL},
			</if>
			<if test="max != null">
				#{max,jdbcType=REAL},
			</if>
			<if test="min != null">
				#{min,jdbcType=REAL},
			</if>
			<if test="volume != null">
				#{volume,jdbcType=BIGINT},
			</if>
			<if test="increase != null">
				#{increase,jdbcType=REAL},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.bdtd.card.data.stock.model.StockMain">
		update stock_main
		<set>
			<if test="symbol != null">
				symbol = #{symbol,jdbcType=VARCHAR},
			</if>
			<if test="day != null">
				day = #{day,jdbcType=DATE},
			</if>
			<if test="open != null">
				open = #{open,jdbcType=REAL},
			</if>
			<if test="close != null">
				close = #{close,jdbcType=REAL},
			</if>
			<if test="max != null">
				max = #{max,jdbcType=REAL},
			</if>
			<if test="min != null">
				min = #{min,jdbcType=REAL},
			</if>
			<if test="volume != null">
				volume = #{volume,jdbcType=BIGINT},
			</if>
			<if test="increase != null">
				increase = #{increase,jdbcType=REAL},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.bdtd.card.data.stock.model.StockMain">
		update stock_main
		set symbol = #{symbol,jdbcType=VARCHAR},
		day = #{day,jdbcType=DATE},
		open = #{open,jdbcType=REAL},
		close = #{close,jdbcType=REAL},
		max = #{max,jdbcType=REAL},
		min = #{min,jdbcType=REAL},
		volume = #{volume,jdbcType=BIGINT},
		increase = #{increase,jdbcType=REAL}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="dataList" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select * from stock_main
		<where>
			<if test="begin != null">
				day=#{begin}
			</if>
			<if test="symbol!=null">
				and symbol=#{symbol}
			</if>
			<if test="minIncrease!=0">
				and increase>#{last}
			</if>
			<if test="minVolume!=0">
				and volume>#{minVolume}
			</if>
			order by
			<if test="type==1">increase desc</if>
			<if test="type==2">volume desc</if>
			limit 100
		</where>
	</select>

	<select id="getTotal" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultType="int">
		select count(*) from stock_main
		<where>
			day=#{begin}
			<if test="symbol!=null">
				and symbol=#{symbol}
			</if>
			<if test="minIncrease!=0">
				and increase>#{last}
			</if>
			<if test="minVolume!=0">
				and volume>#{minVolume}
			</if>
		</where>
	</select>

	<select id="dataList1" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select * from stock_main where day = #{begin} ORDER BY increase DESC limit
		0,100
	</select>

	<select id="getTotal1" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultType="int">
		select count(*) from stock_main where day = #{begin}
	</select>

	<select id="showChart" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select distinct symbol,day,open,close,max,min,volume,increase from
		stock_main where
		<trim suffixOverrides="and">
			<if test="symbol!=null">
				symbol=#{symbol} and
			</if>
			<if test="begin!=null">
				<if test="end!=null">
					day between #{begin} and #{end}
				</if>
				<if test="end==null">
					day between DATE_ADD(#{begin},INTERVAL -120 day) and 
					DATE_ADD(#{begin},INTERVAL 10 day)<!-- DATE_ADD(#{begin},INTERVAL 10 day) -->
				</if>
			</if>
			<if test="begin==null">
				day &gt; '2000-03-03'
			</if>
		</trim>
		order by day
	</select>

	<select id="selectSymbols" resultType="java.lang.String">
		select symbol from stock
	</select>

	<update id="updateStatus" parameterType="java.util.Map">
		update stock_main_id set status = 1
		where symbol in
		<foreach collection="symbols" item="item" open="(" close=")"
			separator=",">
			#{item}
		</foreach>
	</update>

	<insert id="insertStockAyalyseResult" parameterType="com.bdtd.card.data.stock.model.StockAnalyseResult">
		insert into stock_analyse_result(symbol,begin,end,type,increase)
		values(#{symbol},#{begin},#{end},#{type},#{increase})
	</insert>

	<select id="selectAll" resultType="java.lang.String">
		select symbol from stock_code
	</select>


	<select id="select1" parameterType="java.lang.String"
		resultType="com.bdtd.card.data.stock.model.StockAnalyseResult">
		select * from stock_analyse_result_1 where symbol = #{symbol}
	</select>

	<select id="selectTop100" resultType="com.bdtd.card.data.stock.model.StockTop100"
		parameterType="java.util.Date">
		select symbol,increase incre from stock_main where day=#{day} ORDER BY
		increase desc LIMIT 100
	</select>

	<resultMap type="com.bdtd.card.data.stock.model.StockTop100" id="IncreaseTop100">
		<result column="symbol" property="symbol" />
		<result column="incre" property="incre" jdbcType="VARCHAR" />
		<collection property="increases" ofType="java.lang.Float">
			<result column="increase" property="value" />
		</collection>
	</resultMap>

	<select id="selectTop100Dl" parameterType="java.util.Map"
		resultMap="IncreaseTop100">
		select symbol,increase from stock_main
		where symbol in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item.symbol}
		</foreach>
		and day BETWEEN DATE_ADD(#{begin},INTERVAL -30 day) and
		DATE_ADD(#{begin},INTERVAL 10 day) order by symbol,day
	</select>

	<select id="selectDays" parameterType="java.sql.Date"
		resultType="java.util.Map">
		select DATE_ADD(#{begin},INTERVAL -30 day) begin,DATE_ADD(#{begin},INTERVAL
		10 day) end
	</select>

	<select id="selectAllDay" resultType="string">
		select day from stock_main_days where day &gt; '2000-02-14' and
		type!=#{count} limit 100
	</select>

	<update id="updateStockMainDays" parameterType="java.util.Map">
		update stock_main_days set type=#{type} where day in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item}
		</foreach>
	</update>

	<select id="selectAnalyse" resultMap="StockMainAnalyse"
		parameterType="map">
		select symbol,increase,day,close from stock_main
		where day BETWEEN DATE_ADD(#{begin},INTERVAL -70 day) and
		DATE_ADD(#{begin},INTERVAL (#{remainDays}*2) day) order by symbol,day
	</select>

	<insert id="insertStockMainAnalyse" parameterType="java.util.Map">
		insert into
		stock_main_analyse(symbol,now,nowIncrease,lastIncrease,type,analyseType,data)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.symbol},#{item.now},#{item.nowIncrease},#{item.lastIncrease},#{item.type},#{item.analyseType},#{item.data})
		</foreach>
	</insert>

	<select id="findStock" resultMap="StockMainAnalyse">
		select * from stock_main where day between DATE_ADD(CURDATE(),INTERVAL -70
		day) and CURDATE() order by day
	</select>

	<insert id="insertAnalyse" parameterType="map">
		insert into
		stock_analyse(symbol,now,nowIncrease,maxMinIncrease,maxMinIncreaseType,minNowIncrease,minNowIncreaseType,maxMinDays,maxMinDaysType,minNowDays,minNowDaysType)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.symbol},#{item.now},#{item.nowIncrease},#{item.maxMinIncrease},#{item.maxMinIncreaseType},#{item.minNowIncrease},#{item.minNowIncreaseType},#{item.maxMinDays},#{item.maxMinDaysType},#{item.minNowDays},#{item.minNowDaysType})
		</foreach>
	</insert>

	<insert id="insertStockAnaylseBase" parameterType="map">
		insert into
		stock_analyse_base(symbol,nowDay,nowIncrease,nowVol,lastIncrease,priceType,priceIncrease1,priceIncrease2,priceDay1,priceDay2,vols,maxIncreases,minIncreases)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.symbol},#{item.nowDay},#{item.nowIncrease},#{item.nowVol},#{item.lastIncrease},#{item.priceType},#{item.priceIncrease1},#{item.priceIncrease2},#{item.priceDay1},#{item.priceDay2},#{item.vols},#{item.maxIncreases},#{item.minIncreases})
		</foreach>
	</insert>

	<select id="selectByDay" parameterType="java.sql.Date"
		resultType="string">
		select distinct day from stock_main where day &lt;= #{day} ORDER BY day desc
		limit 10
	</select>

	<select id="selectAllCodes" resultType="string">
		select code from stock
	</select>

	<insert id="insertStockBuySell" parameterType="map">
		insert into
		${tableName}(code,symbol,percent,high,price,open,low,updown,volume,yestclose,time,
		turnover,ask1,ask2,ask3,ask4,ask5,askvol1,askvol2,askvol3,askvol4,askvol5,
		bid1,bid2,bid3,bid4,bid5,bidvol1,bidvol2,bidvol3,bidvol4,bidvol5,day)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.code},#{item.symbol},#{item.percent},#{item.high},#{item.price},#{item.open},#{item.low},#{item.updown},#{item.volume},#{item.yestclose},#{item.time},
			#{item.turnover},#{item.ask1},#{item.ask2},#{item.ask3},#{item.ask4},#{item.ask5},#{item.askvol1},#{item.askvol2},#{item.askvol3},#{item.askvol4},#{item.askvol5},
			#{item.bid1},#{item.bid2},#{item.bid3},#{item.bid4},#{item.bid5},#{item.bidvol1},#{item.bidvol2},#{item.bidvol3},#{item.bidvol4},#{item.bidvol5},#{day})
		</foreach>
	</insert>

	<insert id="insertFBVolume" parameterType="map">
		insert into
		stock_fb_volume(symbol,TRADE_TYPE,VOLUME_INC,PRICE,PRICE_PRE,PRICE_INC,DATE_STR,TRADE_TYPE_STR)
		values
		<foreach collection="list" item="item" separator=",">
			(#{symbol},#{item.TRADE_TYPE},#{item.VOLUME_INC},#{item.PRICE},#{item.PRICE_PRE},#{item.PRICE_INC},#{item.DATE_STR},#{item.TRADE_TYPE_STR})
		</foreach>
	</insert>

	<select id="createTable" parameterType="java.util.Map">
		create table ${tableName} like stock_2017_11_02
	</select>

	<select id="selectBySymbol" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select `close`, day from stock_main where symbol = #{symbol}
		<if test="begin == null">
			and `day` &gt; '2017-01-01'
		</if>
		<if test="begin != null">
			and `day` &gt; ${begin}
		</if>
		and `close` &lt; 500 order by `day`
	</select>

	<select id="findByDay" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select * from stock_main where day = #{begin}
	</select>

	<select id="findBySymbolAndDay" parameterType="com.bdtd.card.data.stock.model.StockQuery"
		resultMap="BaseResultMap">
		select * from stock_main
		<where>
			<trim suffixOverrides="and">
				<if test="begin != null">
					day &gt; #{begin} and 
				</if>
				<if test="symbol != null">
					symbol = #{symbol}
				</if>
			</trim>
		</where>
		<if test="remainDays != -1">
			limit 10
		</if>
	</select>
	  
	  
  <select id="findAll1" resultMap="BaseResultMap" parameterType="java.sql.Date">
  	select * from stock_main where `day` between date_add(#{begin}, INTERVAL -60 day) and date_add(#{begin}, INTERVAL 20 day) order by `day`
  </select>
  
  <select id="findAll" resultMap="BaseResultMap" parameterType="java.sql.Date">
  	select * from stock_main 
  	<where>
  		<if test="day != null">
  			`day` &gt;= #{begin}
  		</if>
  	</where>
  	  order by `day`
  </select>
  
  <select id="count" resultType="Integer">
  	select count(distinct symbol) from stock_main
  </select>
</mapper>